import { auth } from '@iden3/js-iden3-auth';
import getRawBody from 'raw-body';


// Create a map to store the auth requests and their session IDs
const requestMap = new Map();

// Sign in endpoint

export async function GetAuthRequest (req, res)  {
    // Audience is verifier id
 
    const hostUrl = process.env.NGROK_URL; 
    const sessionId = 1; // check what is it 
 
    const callbackURL = "/api/callback"
    const audience = "did:polygonid:polygon:mumbai:2qDyy1kEo2AYcP3RT4XGea7BtxsY285szg6yP9SPrs"

    const uri = `${hostUrl}${callbackURL}?sessionId=${sessionId}`;

    // Generate request for basic authentication
    const request = auth.createAuthorizationRequest(
        'test flow',
        audience,
        uri,
    );

    request.id = '7f38a193-0918-4a48-9fac-36adfdb8b542';
    request.thid = '7f38a193-0918-4a48-9fac-36adfdb8b542';
  
  // to be removed 
  const org = "Gyre";
  
    // Add request for a specific proof
    const proofRequest = {
        id: 1,  // should be unique for every request
        circuitId: 'credentialAtomicQuerySigV2',
        query: {
          allowedIssuers: ['*'],
          type: 'EmployeeConfirmation',
          context: 'https://raw.githubusercontent.com/Cosmodude/Gyre_DID/main/schema/EmployeeSchema.jsonld#EmployeeConfirmation',
          credentialSubject: {
            organization: {
              $eq: org,
            },
            /*
            position: {
              $eq: pos
            }
            */
          },
      },
    };
    const scope = request.body.scope ?? [];
    request.body.scope = [...scope, proofRequest];

    // Store auth request in map associated with session ID
    requestMap.set(`${sessionId}`, request);

    return request;
}

//  Callback Endpoint

//The callback post endpoint receives the proof generated by the identity wallet and executes verification of proof.
export async function Callback(req,res) {

    // Get session ID from request
    const sessionId = req.query.sessionId;
  
    // get JWZ token params from the post request
    const raw = await getRawBody(req);
    const tokenStr = raw.toString().trim();
  
    const ethURL = 'https://polygon-mumbai.infura.io/v3/0cbd49cd77ed4132b497031ffc95da6ahttps://polygon-mumbai.infura.io/v3/0cbd49cd77ed4132b497031ffc95da6a';
    const contractAddress = "0x134B1BE34911E39A8397ec6289782989729807a4"
    const keyDIR = "./keys"
  
    const ethStateResolver = new resolver.EthStateResolver(
        ethURL,
        contractAddress,
      );
  
    const resolvers = {
        ['polygon:mumbai']: ethStateResolver,
    };
  
    // fetch authRequest from sessionID
    const authRequest = requestMap.get(`${sessionId}`);
  
    // Locate the directory that contains circuit's verification keys
    const verificationKeyloader = new loaders.FSKeyLoader(keyDIR);
    const sLoader = new loaders.UniversalSchemaLoader('ipfs.io');
  
    // EXECUTE VERIFICATION
    const verifier = new auth.Verifier(
    verificationKeyloader,
    sLoader,
    resolvers,
    );

    try {
        const opts = {
            AcceptedStateTransitionDelay: 5 * 60 * 1000, // 5 minute
            };        
        authResponse = await verifier.fullVerify(tokenStr, authRequest, opts);
        } catch (error) {
        return res.status(500).send(error);
        }
        return res.status(200).set('Content-Type', 'application/json').send("user with ID: " + authResponse.from + " Succesfully authenticated");
}
